# sshid Provider

This provider implements some tools for working with SSH server public keys. Currently this consists of a (pseudo-)resource that captures a remote SSH server's SSH public key at resource creation time, and a function that translates X509 SubjectPublicKeyInfo structures into SSH-compatible public key strings.

This provider was originally created to be used in conjunction with [terraform-provider-podman](https://github.com/decafcode/terraform-provider-podman) in order to facilitate secure communication with remote Podman hosts over SSH, but it may also prove useful elsewhere in the future.

## Host Resource

The `sshid_host` pseudo-resource connects to an SSH server and requests its host public key when the resource is created. This public key snapshot is then recorded in Terraform state and can be used as an input for other resources so that those resources can ensure that the host's host key pair does not change over time (and that those resources are communicating with the intended host and not a malicious impostor). The remote host might be a newly-created cloud compute instance that was set up by another Terraform resource, for example.

The resource is a pseudo-resource in the sense that it only exists inside Terraform state and does not actually create or modify any infrastructure anywhere, but it cannot be implemented as a data source because it needs to persist the originally-observed SSH host public key in Terraform state in order to function properly. It fulfils a similar purpose to a line the `~/.ssh/known_hosts` file managed by OpenSSH, except that it does not interactively prompt the user to confirm the remote host's public key due to Terraform's generally non-interactive nature and just silently accepts it instead.

Of course, this assumes that the initial SSH connection actually connected the server that it was intended to connect to, which may or may not be the case. Practitioners building smaller-scale projects will often connect to a newly-provisioned cloud compute instance and blindly trust the host key fingerprint that OpenSSH presents to them, since a typical cloud compute instance in its default configuration will generate a host key pair on first boot and not provide any way for the user to verify the remote SSH server's identity. This is probably a safe policy in practice, but ultimately that is a decision for the user to make.

## X.509 SPKI to SSH public key converter

Users looking to adopt a more rigorous security posture might instead want to use SSH CA based security to authenticate their SSH servers. The major cloud hosting providers have APIs for managing asymmetric key pairs on their infrastructure, a mechanism to securely supply compute instances with temporary API credentials, and a security policy language that can grant holders of those temporary credentials the right to generate signatures using these hosted key pairs, amongst other actions. Taken together, these features can be used to issue an SSH host certificate on first boot (using e.g. a cloud-init script) which proves that the host is running under the user's control.

Terraform providers for the major cloud providers can be used to set up the CA's key pair, the security policy that grants compute instances permission to generate signatures using this key pair, and the instances themselves under a suitable role that is associated with this policy. However, the Terraform providers and APIs for managing these key pairs typically return the public key in X.509 SubjectPublicKeyInfo format as a PEM block. This provider provides a `fromspki` function that can convert these SPKI-format public keys into the public key string format that SSH tooling understands.

## Example Usage

{{ tffile .ExampleFile }}

{{ .SchemaMarkdown }}
